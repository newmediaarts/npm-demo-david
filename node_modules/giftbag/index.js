// Scroll
class Scroll {
	constructor() {
		this.scrollElements = "";
	}

	// Set a custom selector
	setup(options) {
		if (options) {
			if (options.selector) {
				this.scrollElements = options.selector;
			}
		}
	}

	// run the scroll function
	init() {
		const observer = new IntersectionObserver(
			entries => {
				entries.forEach(entry => {
					const attrArr = Object.values(entry.target.attributes);

					// default
					let threshold = 0.1;
					let playInReverse = false;

					// enable reverse and reassign threshold if specified in data-attr
					attrArr.map(attr => {
						if (attr.name === "data-reverse") {
							playInReverse = true;
						}
						if (attr.name === "data-threshold") {
							threshold = parseFloat(attr.nodeValue);
						} else {
							threshold = 0.1;
						}
					});

					if (entry.intersectionRatio >= threshold) {
						entry.target.classList.add("visible");
					} else if (playInReverse) {
						entry.target.classList.remove("visible");
					}
				});
			},
			{
				threshold: [0, 0.2, 1]
			}
		);

		this.scrollElements.forEach(el => {
			observer.observe(el);
		});
	}
}

//  PARALLAX
class Parallax {
	constructor() {
		this.revealPoint = 0;
		this.selector = "";
		this.ease = "ease-out";
	}

	setup(options) {
		if (options) {
			if (options.selector) {
				this.selector = options.selector;
			}
			if (options.revealPoint) {
				this.revealPoint = options.revealPoint;
			}
			if (options.ease) {
				this.ease = options.ease;
			}

			if (options.direction) {
				this.direction = options.direction;
			}
		}
	}

	runParallax() {
		const pageTop = window.pageYOffset;
		const pageMid = pageTop + window.innerHeight / 2;

		this.selector.forEach(el => {
			const wHeight = window.innerHeight;
			const revealTop = el.getBoundingClientRect().top;

			let active;

			if (revealTop < wHeight - this.revealPoint) {
				active = true;
			} else {
				active = false;
			}

			if (revealTop < 0 + this.revealPoint) {
				active = false;
			}

			if (active) {
				// Run this if it already has a data attribute set
				const topSection = el.offsetTop;
				const midSection = topSection + el.offsetHeight / 2;

				const viewDistanceLeft = pageMid - midSection;
				const parallaxSpeed = parseFloat(
					el.getAttribute("data-parallax-speed")
				);

				// Sets the parallax direction
				let direction = "";

				if (el.hasAttribute("data-parallax-direction")) {
					// Direction to value of the attribute
					direction = el.getAttribute("data-parallax-direction");
				} else {
					// Set default direction to vertical
					direction = "vertical";
				}

				// Handle transform based on direction
				if (direction.toLowerCase() === "vertical") {
					el.style.transform = `translate3d(0, ${(viewDistanceLeft *
						parallaxSpeed) /
						3}px, 0)`;
				} else if (direction.toLowerCase() === "horizontal") {
					el.style.transform = `translate3d( ${(viewDistanceLeft *
						parallaxSpeed) /
						3}px, 0, 0)`;
				}

				el.style.transition = `transform ${this.ease}`;
			}
		});
	}

	init() {
		document.addEventListener("scroll", () => {
			this.runParallax();
		});
	}
}

// EVENT GROUP
class EventGroup {
	constructor() {
		this.selector = "";
	}

	setup(options) {
		// Setup of the custom selector
		if (options.selector) {
			this.selector = options.selector;
		}
	}

	init() {
		this.selector.forEach(event => {
			const listener = event.getAttribute("data-event");
			const setElement = event.getAttribute("data-event-element");
			const setClass = event.getAttribute("data-event-add");

			event.addEventListener(listener, () => {
				const elements = document.querySelectorAll(`${setElement}`);

				elements.forEach(element => {
					element.classList.toggle(setClass);
				});
			});
		});
	}
}

// DarkMode
class DarkMode {
	constructor() {
		this.wrapper = "";
		this.darkModeClass = "dark-mode-active";
		this.active = false;
		this.trigger = "";
	}

	setup(options) {
		if (options) {
			if (options.wrapper) {
				this.wrapper = options.wrapper;
			}
			if (options.trigger) {
				this.trigger = options.trigger;
			}
			if (options.darkModeClass) {
				this.darkModeClass = options.darkModeClass;
			}
		}
	}

	renderDarkMode() {
		const allElements = this.wrapper.querySelectorAll("*");

		if (this.active === true) {
			document.body.setAttribute("data-dark-mode", true);
			allElements.forEach(el => {
				el.classList.add(this.darkModeClass);
			});
			this.active = false;
			localStorage.setItem("dark-mode", "true");
		} else if (this.active === false) {
			allElements.forEach(el => {
				document.body.removeAttribute("data-dark-mode");
				el.classList.remove(this.darkModeClass);

				this.active = true;
				localStorage.removeItem("dark-mode");
			});
		}
	}

	init() {
		let localStatus = localStorage.getItem("dark-mode");

		if (localStatus == "true") {
			this.active = true;
		}

		this.renderDarkMode();

		this.trigger.addEventListener("click", () => {
			this.renderDarkMode();
		});
	}
}

// Container Queries
class ContainerQueries {
	constructor() {
		selector = "";
		attribute = "";
	}

	setup(options) {
		if (options.selector) {
			this.selector = options.selector;
		}
		if (options.attribute) {
			this.attribue = options.attribute;
		}
	}

	runContainerQueries() {
		this.selector.forEach(el => {
			// Get the value of the breakpoints attribute and split them into key value pairs
			// Reason why the breakpoints need a ; between each different size
			const breakpointAttributes = el.getAttribute(this.attribue).split("; ");

			// Add the data-current-breakpoint attribute to the el and set it to initial
			el.setAttribute("data-current-breakpoint", "initial");

			// Get the total width of the element
			const elementWidth = el.clientWidth;

			// Create keys array
			let keysArr = [];
			// Map through the breakpoint attributes and add a breakpoint class according to the key and the width according to the value
			breakpointAttributes.map((attr, i) => {
				// Split them into key and value
				const splitAttr = attr.split(":");
				const key = splitAttr[0];
				const value = +splitAttr[1];

				// If the value is greater or equal to the element width then you will add the current data-current-breakpoint
				if (value < elementWidth) {
					keysArr.push(key);
					// Set the current index to be the current breakpoint
					el.dataset.currentBreakpoint = keysArr[i];
				}
			});
		});
	}

	init() {
		this.runContainerQueries();
	}
}

module.exports = {
	Scroll,
	Parallax,
	EventGroup,
	DarkMode,
	ContainerQueries
};
